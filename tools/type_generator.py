"""
"""

import argparse
from pprint import pformat


def main():
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("outfile", type=argparse.FileType("w"))
    args = arg_parser.parse_args()

    lines = []
    lines.append('"""')
    lines.append("Available types and conversions.")
    lines.append("")
    lines.append(f"This file is automatically generated by {arg_parser.prog}")
    lines.append('"""')
    lines.append("")

    lines.extend(format_types("PRIMITIVES", primitives()))
    lines.extend(format_types("BOOLS", bools()))
    lines.extend(format_types("INTS", ints()))

    lines.append("TYPES = PRIMITIVES | BOOLS | INTS")

    args.outfile.write("\n".join(lines))


def format_types(name, types):
    return [f"{name} = {pformat(types)}", ""]


def primitives():
    return {
        "_".join(reversed(primitive.split(" "))): primitive for primitive in PRIMITIVES
    }


def bools():
    return {"bool": "bool"}


def ints():
    ts = ["intptr", "uintptr"] + [
        tp.format(size) for size in INT_SIZES for tp in INT_TEMPLATES
    ]
    return {t: f"{t}_t" for t in ts}


INT_SIZES = [8, 16, 32, 64, 128, 256]
INT_TEMPLATES = ["int{}", "uint{}"]

PRIMITIVES = [
    "char",
    "signed char",
    "unsigned char",
    "short",
    "signed short",
    "unsigned short",
    "int",
    "signed int",
    "unsigned int",
    "long",
    "unsigned long",
    "signed long",
    "long long",
    "signed long long",
    "signed long long",
    "float",
    "double",
    "long double",
]


# BOOL_TYPES = {
#     "bool": "bool",
# }

# int_sizes = [8, 16, 32, 64, 128, 256]
# int_templates = ["int{}_t", "uint{}_t"]

# INT_TYPES = {"intptr_t", "uintptr_t"} | set(
#     tp.format(size) for size in int_sizes for tp in int_templates
# )

# ALL_TYPES = BASE_TYPES | BOOL_TYPES | INT_TYPES


if __name__ == "__main__":
    main()
